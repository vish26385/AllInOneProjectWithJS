<div class="d-flex justify-content-center align-items-center" style="min-height:70vh;">
    <div class="card shadow-lg border-0 rounded-4" style="width: 420px;">
        <div class="card-body p-4">
            <h3 class="text-center mb-4">📝 Register</h3>

            <form id="registerForm">
                <div class="mb-3">
                    <label for="registerUsername" class="form-label">Username</label>
                    <input type="text" class="form-control" id="registerUsername" placeholder="Enter Username" required />
                </div>

                <div class="mb-3">
                    <label for="registerEmail" class="form-label">Email</label>
                    <input type="email" class="form-control" id="registerEmail" placeholder="Enter Email" required />
                </div>

                <div class="mb-3">
                    <label for="registerPassword" class="form-label">Password</label>
                    <input type="password" class="form-control" id="registerPassword" placeholder="Enter Password" required />
                </div>

                <button type="button" class="btn btn-success w-100 mb-3" onclick="register()">Register</button>

                <div class="text-center">
                    <span class="small">Already a member?</span>
                    <a href="/Account/Login" class="text-decoration-none">Sign in</a>
                </div>
            </form>

            <div class = "notification" id="registerMessage"></div>
        </div>
    </div>
</div>

<script>
  async function register() {
        const username = document.getElementById('registerUsername').value;
        const email = document.getElementById('registerEmail').value;
        const password = document.getElementById('registerPassword').value;

        try{
              const response = await fetch('/Account/Register', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ username, email, password })
              });

              // 🔹 Handle validation / bad request errors (400)
              if (response.status === 400) {
                  const errorResult = await response.json();
                  showMessage(errorResult.message || "Validation failed", false);
                  return;
              }

                // 🔹 Handle server errors
              if (!response.ok) {
                  const text = await response.text();
                  console.error("Server error:", text);
                  showMessage("Insert failed", false);
                  return;
              }

              const result = await response.json();

              if (result.success) {
                    window.location.href = '/Account/Login';
              }
          } catch (error) {
              console.error("Error:", error);
              showMessage("Unexpected error", false);
          };
    }

function showMessage(message, success) {
    const msgBox = document.getElementById('registerMessage');
          msgBox.innerText = message;
          // background color based on success/failure
          msgBox.style.backgroundColor = success ? "#4BB543" : "#DC3545";

          // trigger animation
          msgBox.classList.remove("show");
          void msgBox.offsetWidth; // reflow hack to restart animation
          msgBox.classList.add("show");

          // auto hide after 3s
          setTimeout(() => {
              msgBox.classList.remove("show");
          }, 2000);
}

    window.onload = function () {
        document.getElementById('registerUsername')?.focus();
    }
</script>