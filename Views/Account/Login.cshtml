<div class="d-flex justify-content-center align-items-center" style="min-height:70vh;">
    <div class="card shadow-lg border-0 rounded-4" style="width: 400px;">
        <div class="card-body p-4">
            <h3 class="text-center mb-4">🔐 Login</h3>

            <form id="loginForm">
                <div class="mb-3">
                    <label for="loginUsername" class="form-label">Username</label>
                    <input type="text" class="form-control" id="loginUsername" placeholder="Enter Username" required />
                </div>

                <div class="mb-3">
                    <label for="loginPassword" class="form-label">Password</label>
                    <input type="password" class="form-control" id="loginPassword" placeholder="Enter Password" required />
                </div>

                <div class="d-flex justify-content-between mb-3">
                    <a href="/Account/ForgotPassword" class="text-decoration-none small">Forgot Password?</a>
                </div>

                <button type="button" class="btn btn-primary w-100 mb-3" onclick="login()">Login</button>

                <div class="text-center">
                    <span class="small">Not a member?</span>
                    <a href="/Account/Register" class="text-decoration-none">Sign up now</a>
                </div>
            </form>

            <div class="notification" id="loginMessage"></div>
        </div>
    </div>
</div>

<script>      
    async function login() {
            const username = document.getElementById('loginUsername').value;
            const password = document.getElementById('loginPassword').value;

            try
            {
                const response = await fetch('/Account/Login', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ username, password })
                            });

                // 🔹 Handle validation / bad request errors (400)
                if (response.status === 400) {
                    const errorResult = await response.json();
                    showMessage(errorResult.message || "Validation failed", false);
                    return;
                }

                  // 🔹 Handle server errors
                if (!response.ok) {
                    const text = await response.text();
                    console.error("Server error:", text);
                    showMessage("Insert failed", false);
                    return;
                }

                const result = await response.json();

                    if (result.success) {
                          window.location.href = '/Home/Index';
                    }
            }
            catch (error)
            {
                    console.error("Error:", error);
                    showMessage("Unexpected error", false);
            }
        }

    function showMessage(message, success) {
          const msgBox = document.getElementById('loginMessage');
                msgBox.innerText = message;
                // background color based on success/failure
                msgBox.style.backgroundColor = success ? "#4BB543" : "#DC3545";

                // trigger animation
                msgBox.classList.remove("show");
                void msgBox.offsetWidth; // reflow hack to restart animation
                msgBox.classList.add("show");

                // auto hide after 3s
                setTimeout(() => {
                    msgBox.classList.remove("show");
                }, 2000);
    }

        window.onload = function () {
            document.getElementById('loginUsername')?.focus();
        }
</script>
