<h2 class="mb-4 text-center">📦 Manage Items</h2>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-sm border-0 rounded-4 mb-4">
            <div class="card-body">
                <h5 class="card-title text-center mb-3">Add / Edit Item</h5>
                <form id="itemForm">
                    <input type="hidden" id="itemId" />

                    <div class="mb-3">
                        <label for="itemName" class="form-label">Item Name</label>
                        <input type="text" class="form-control" id="itemName" placeholder="Enter item name" required />
                    </div>

                    <div class="mb-3">
                        <label for="itemPrice" class="form-label">Item Price</label>
                        <input type="number" class="form-control" step="0.01" id="itemPrice" placeholder="Enter item price" required />
                    </div>
                    <input type="hidden" type="number" id="itemCurrentStock" />
                    <button type="button" id="btnItemSave" class="btn btn-primary w-100" onclick="insertItem()">Save</button>
                </form>
                <div class="notification" id="itemMessage"></div>
            </div>
        </div>
    </div>
</div>

<div class="card shadow-sm border-0 rounded-4">
    <div class="card-body">
        <h5 class="card-title mb-3">Item List</h5>
        <div class="table-responsive">
            <table class="table table-striped table-hover align-middle" id="itemsTable">
                <thead class="table-dark">
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Stock</th>
                        <th style="width: 400px;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Count > 0)
                    {
                        foreach (var item in Model)
                        {
                            <tr>
                                <td class="itemName">@item.Name</td>
                                <td class="itemPrice">@item.Price</td>
                                <td class="itemCurrentStock">@item.CurrentStock</td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-warning me-1"
                                            onclick="editItem(@item.Id,'@item.Name',@item.Price,@item.CurrentStock,this)">
                                        ✎ Edit
                                    </button>
                                    <button type="button" class="btn btn-sm btn-danger me-1"
                                            onclick="deleteItem(@item.Id, this)">
                                        ✕ Delete
                                    </button>
                                    <button type="button" class="btn btn-sm btn-success"
                                            onclick="addToCart(@item.Id)">
                                        + Add To Cart
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" id = "firstRow" class="text-center text-muted">No items available</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    async function insertItem() {
        const name = document.getElementById('itemName').value;
        const price = parseFloat(document.getElementById('itemPrice').value);

        try {
                const response = await fetch('/Item/InsertItem', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, price })
            });

            // 🔹 Handle not logged in
            if (response.status === 401) {
                showMessage("Please login first", false);
                window.location.href = "/Auth/Login";
                return;
            }

            // 🔹 Handle validation / bad request errors (400)
            if (response.status === 400) {
                const errorResult = await response.json();
                showMessage(errorResult.message || "Validation failed", false);
                return;
            }

            // 🔹 Handle server errors
            if (!response.ok) {
                const text = await response.text();
                console.error("Server error:", text);
                showMessage("Insert failed", false);
                return;
            }

            // 🔹 Parse success response
            const result = await response.json();
            showMessage(result.message, result.success);

            if (result.success) {                    
                    // Option B: Add new row dynamically without reload
                    const table = document.getElementById('itemsTable');

                    const firstRrow = document.getElementById('firstRow');
                         if (firstRrow) firstRrow.remove();

                    const newRow = table.insertRow();
                    
                    newRow.innerHTML = `
                        <td class="itemName">${result.data.name}</td>
                        <td class="itemPrice">${parseFloat(result.data.price).toFixed(2)}</td>
                        <td class="itemCurrentStock">${parseFloat(result.data.currentStock).toFixed(2)}</td>
                        <td>
                            <button type="button" class="btn btn-sm btn-warning me-1"
                                    onclick="editItem(${result.data.id}, '${result.data.name}', ${result.data.price}, ${result.data.currentStock}, this)">
                                ✎ Edit
                            </button>
                            <button type="button" class="btn btn-sm btn-danger me-1"
                                    onclick="deleteItem(${result.data.id}, this)">
                                ✕ Delete
                            </button>
                            <button type="button" class="btn btn-sm btn-success"
                                    onclick="addToCart(${result.data.id})">
                                + Add To Cart
                            </button>
                        </td>
                    `;

                    // clear inputs
                    document.getElementById('itemName').value = "";
                    document.getElementById('itemPrice').value = "";                    
            }
        } catch (error) {
            console.error("Error:", error);
            showMessage("Unexpected error", false);
        }
    }

    function editItem(id, name, price, currentstock, btnInRow) {
        document.getElementById('itemId').value = id;
        document.getElementById('itemName').value = name;
        document.getElementById('itemPrice').value = price;
        document.getElementById('itemCurrentStock').value = currentstock;

        const btn = document.getElementById('btnItemSave');

        btn._editingRow = btnInRow.closest('tr');

        // Assign new handler, pass btn itself
        btn.onclick = function () {
            updateItem(btn); // pass btn to updateItem
        };
        btn.innerText = "Update";
        btn.classList.remove("btn-primary");
        btn.classList.add("btn-warning");
    }

    async function updateItem(btn) {
        const id = document.getElementById('itemId').value;
        const name = document.getElementById('itemName').value;
        const price = parseFloat(document.getElementById('itemPrice').value);
        const currentstock = parseFloat(document.getElementById('itemCurrentStock').value);

        try {
            const response = await fetch('/Item/UpdateItem', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id, name, price, currentstock })
            });

            // 🔹 Handle not logged in (Unauthorized)
            if (response.status === 401) {
                showMessage("Please login first", false);
                window.location.href = "/Auth/Login";
                return;
            }

            // 🔹 Handle validation / bad request errors (400)
            if (response.status === 400) {
                const errorResult = await response.json();
                showMessage(errorResult.message || "Validation failed", false);
                return;
            }

            // 🔹 Handle other server errors (400, 500, etc.)
            if (!response.ok) {
                const text = await response.text();
                console.error("Server error:", text);
                showMessage("Update failed", false);
                return;
            }

            // 🔹 Parse JSON if success
            const result = await response.json();
            showMessage(result.message, result.success);

            if (result.success) {
                const row = btn._editingRow;
                if (row.rowIndex >= 0) {
                    row.querySelector('.itemName').textContent = name;
                    row.querySelector('.itemPrice').textContent = parseFloat(price).toFixed(2);                
                    row.querySelector('.itemCurrentStock').textContent = parseFloat(currentstock).toFixed(2);

                    row.innerHTML = `
                        <td class="itemName">${name}</td>
                        <td class="itemPrice">${parseFloat(price).toFixed(2)}</td>
                        <td class="itemCurrentStock">${parseFloat(currentstock).toFixed(2)}</td>
                        <td>
                            <button type="button" class="btn btn-sm btn-warning me-1"
                                    onclick="editItem(${id}, '${name}', ${price}, ${currentstock}, this)">
                                ✎ Edit
                            </button>
                            <button type="button" class="btn btn-sm btn-danger me-1"
                                    onclick="deleteItem(${id}, this)">
                                ✕ Delete
                            </button>
                            <button type="button" class="btn btn-sm btn-success"
                                    onclick="addToCart(${id})">
                                + Add To Cart
                            </button>
                        </td>
                    `;
                }

                document.getElementById('itemName').value = "";
                document.getElementById('itemPrice').value = "";

                btn.innerText = "Save";
                btn.classList.remove("btn-warning");
                btn.classList.add("btn-primary");   
                
                btn.onclick = function () {
                    insertItem(); // pass btn to updateItem
                };
            }
        } catch (error) {
            console.error("Error:", error);
            showMessage("Unexpected error", false);
        }
    }

    async function deleteItem(id, btn) {
        try {
            const response = await fetch('/Item/DeleteItem', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: id
            });

            // 🔹 Handle not logged in (401 Unauthorized)
            if (response.status === 401) {
                showMessage("Please login first", false);
                window.location.href = "/Auth/Login";
                return;
            }

            // 🔹 Handle other server errors
            if (!response.ok) {
                const text = await response.text();
                console.error("Server error:", text);
                showMessage("Delete failed", false);
                return;
            }

            // 🔹 If success, parse JSON
            const result = await response.json();
            showMessage(result.message, result.success);

            if (result.success) {
                const row = btn.closest('tr');                
                if (row.rowIndex = 1)
                  {
                      // Option B: Add new row dynamically without reload
                    const table = document.getElementById('itemsTable');
                    
                    const newRow = table.insertRow();
                    newRow.innerHTML = `<td colspan="4" id = "firstRow" class="text-center text-muted">No items available</td>`;
                  }
                if (row) row.remove();


                document.getElementById('itemName').value = "";
                document.getElementById('itemPrice').value = "";

                const btnSave = document.getElementById('btnItemSave');
                btnSave.innerText = "Save";
                btnSave.classList.remove("btn-warning");
                btnSave.classList.add("btn-primary");

                btnSave.onclick = function () {
                    insertItem(); // pass btn to updateItem
                };
            }
        } catch (error) {
            console.error('Error:', error);
            showMessage("Unexpected error", false);
        }
    }

    async function addToCart(itemId) {
        try {
            const response = await fetch('/Cart/AddToCart?itemId=' + itemId, {
                method: 'POST'
            });

            // 🔹 Handle not logged in (401 Unauthorized)
            if (response.status === 401) {
                showMessage("Please login first", false);
                window.location.href = "/Auth/Login";
                return;
            }

            // 🔹 Handle server errors
            if (!response.ok) {
                const text = await response.text();
                console.error("Server error:", text);
                showMessage("Insert failed", false);
                return;
            }

            const result = await response.json();
            showMessage(result.message, result.success);

            if (result.success) {
                loadCartCount();
            }
        } catch (error) {
            console.error('Error:', error);
            showMessage("Unexpected error", false);
        }
    }

    function showMessage(message, success) {
        const msgBox = document.getElementById('itemMessage');
              msgBox.innerText = message;

              // background color based on success/failure
              msgBox.style.backgroundColor = success ? "#4BB543" : "#DC3545";

              // trigger animation
              msgBox.classList.remove("show");
              void msgBox.offsetWidth; // reflow hack to restart animation
              msgBox.classList.add("show");

              // auto hide after 3s
              setTimeout(() => {
                  msgBox.classList.remove("show");
              }, 2000);
    }
   
     async function loadCartCount() {
        try {
            let response = await fetch('/Cart/GetCartCount');
            let data = await response.json();

            let badge = document.getElementById("cart-count");
            badge.textContent = data.itemCount;

            badge.className = data.itemCount > 0 ? "position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" : "";

            // hide badge if 0
            badge.style.display = data.itemCount > 0 ? "inline-block" : "none";
        } catch (e) {
            console.error("Error fetching cart count:", e);
        }
    }    

    window.onload = function () {
        document.getElementById('itemName')?.focus();
    }
</script>
