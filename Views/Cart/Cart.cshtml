<h2 class="mb-4">Your Cart</h2>

<div class="card shadow-sm border-0 rounded-4">
    <div class="card-body">
        <h5 class="card-title mb-3">Cart Items</h5>

        <div class="notification" id="cartMessage"></div>

        <table class="table table-striped table-hover align-middle">
            <thead class="table-dark">
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Price</th>
                    <th scope="col" class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null)
                {
                    foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Price</td>
                            <td class="text-center">
                                <button type="button" class="btn btn-sm btn-warning me-1"
                                        onclick="removeFromCart(@item.Id, this)">
                                    Remove
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3" class="text-center text-muted">Your cart is empty.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<script>
    async function removeFromCart(itemId, btn) {
        try {
            const response = await fetch('/Cart/RemoveFromCart?itemId=' + itemId, {
                method: 'POST'
            });

            // 🔹 Handle not logged in (401 Unauthorized)
            if (response.status === 401) {
                showMessage("Please login first", false);
                window.location.href = "/Account/Login";
                return;
            }

            // 🔹 Handle server errors
            if (!response.ok) {
                const text = await response.text();
                console.error("Server error:", text);
                showMessage("Insert failed", false);
                return;
            }

            const result = await response.json();

            const msgBox = document.getElementById('cartMessage');
              msgBox.innerText = result.message;

              // background color based on success/failure
              msgBox.style.backgroundColor = result.success ? "#4BB543" : "#DC3545";

              // trigger animation
              msgBox.classList.remove("show");
              void msgBox.offsetWidth; // reflow hack to restart animation
              msgBox.classList.add("show");

              // auto hide after 3s
              setTimeout(() => {
                  msgBox.classList.remove("show");
              }, 2000);

            //document.getElementById('cartMessage').innerText = result.message;

            if (result.success) {
                const row = btn.closest('tr');
                if (row) row.remove();
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }
</script>
